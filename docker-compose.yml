services:
  api1: &api
    build: 
      context: .
      target: prod
    container_name: api1
    command: npm run start
    depends_on:
      - postgres
        #condition: service_healthy
    deploy:
      resources:
        limits:
          cpus: '0.2'
          memory: '150MB'

  api2: 
    <<: *api
    container_name: api2


  nginx:
    image: nginx 
    container_name: nginx
    volumes:
      - ./config/nginx.conf:/etc/nginx/nginx.conf
    ports:
      - 9999:9999
    depends_on:
      - api1
      - api2
    deploy:
      resources:
        limits:
          cpus: '0.1'
          memory: '10MB'

  postgres:
    image: postgres:alpine
    container_name: postgres
    environment:
      - POSTGRES_PASSWORD=123
    ports:
      - 5432:5432
    volumes:
      - ./config/init.sql:/docker-entrypoint-initdb.d/init.sql
      - ./config/postgresql.conf:/etc/postgresql/postgresql.conf
    command: postgres -c config_file=/etc/postgresql/postgresql.conf
      #healthcheck:
      #  test: ["CMD-SHELL", "pg_isready -U postgres"]
      #  interval: 5s
      #  timeout: 5s
      #  retries: 5
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: '240MB'
